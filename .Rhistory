??csv
setwd("~/Dropbox (fresh4cast)/Learn/ML in R/project/ML-project")
setwd("~/Dropbox (fresh4cast)/Learn/ML in R/project/ML-project")
library(caret)
library(ggplot2)
dt = read.table("pml-training.csv")
head(dt)
dt = read.csv2("pml-training.csv")
head(dt)
View(head(dt))
str(dt)
?read.csv2
dt = read.csv("pml-training.csv")
str(dt)
head(str(dt))
tail(str(dt))
View(str(dt))
View(head(dt))
dts = dt[,100:]
dts = dt[,c(100:)]
dts = dt[,c(100:160)]
str(dts)
dts = dt[,c(1:4)]
str(dts)
dts = dt[,c(5:160)]
str(dts)
library(kernlab)
library(ggplot2)
inBuild <- createDataPartition(y=dts$classe, p=.8, list=FALSE)
inBuild <- createDataPartition(y=dts$classe, p=.8, list=FALSE)
bld <- dts[inBuild]
vld <- dts[-inBuild]
inTrain <- createDataPartition(y=bld$classe, p=6/8, list=FALSE)
dts = dt[,c(5:160)]
inBuild <- createDataPartition(y=dts$classe, p=.8, list=FALSE)
bld <- dts[inBuild,]
vld <- dts[-inBuild,]
vld
inTrain <- createDataPartition(y=bld$classe, p=6/8, list=FALSE)
trn <- bld[inTrain,]
tst <- bld[-inTrain,]
View(tst)
dim(trn)
dim(tst)
dim(vld)
inBuild <- createDataPartition(y=dts$classe, p=8/10, list=FALSE)
bld <- dts[inBuild,]
vld <- dts[-inBuild,]
inTrain <- createDataPartition(y=bld$classe, p=6/8, list=FALSE)
trn <- bld[inTrain,]
tst <- bld[-inTrain,]
dim(trn)
dim(tst)
dim(vld)
str(trn)
g <- ggplot(data=trn, mapping=aes(roll_belt, classe))
g
g <- ggplot(data=trn, mapping=aes(accel_arm_y, classe))
g
g <- ggplot(data=trn, mapping=aes(accel_arm_y, classe)) + geom_point()
g
featurePlot(trn)
featurePlot(trn, classe)
featurePlot(trn, trn$classe)
featurePlot(trn[,c(1:9)], trn$classe)
featurePlot(trn[,1], trn$classe)
featurePlot(trn[,5], trn$classe)
featurePlot(trn[,5:10], trn$classe)
summary(trn)
dts = dt[,c(6:160)]
inBuild <- createDataPartition(y=dts$classe, p=8/10, list=FALSE)
bld <- dts[inBuild,]
vld <- dts[-inBuild,]
inTrain <- createDataPartition(y=bld$classe, p=6/8, list=FALSE)
trn <- bld[inTrain,]
tst <- bld[-inTrain,]
summary(trn)
str(trn)
cc <- complete.cases(trn)
summary(cc)
g <- ggplot(data=trn, mapping=aes(num_window, classe)) + geom_point()
g
baseModel <- train(classe ~ ., data=trn, model="glm")
?for
?for loop
for (i in 1:5) {
i
}
i+1
for (i in c(1:5)) {
i+1
}
for (i in c(1:5)) {
i+1
i
}
for (i in c(1:5)) {
plot(trn[,i])
}
?par
par(mfrow=c(1,5))
for (i in c(1:5)) {
plot(trn[,i])
}
featurePlot(trn[,c(1:5)])
featurePlot(trn[,c(1:5)], trn$classe)
featurePlot(trn[,c(4:5)], trn$classe)
featurePlot(trn[,c(3:5)], trn$classe)
hist(trn[,1])
hist(trn[,2])
par(mfrow=c(1,5))
for (i in c(1:5)) {
plot(trn[,i])
}
preObj <- preProcess(trn[,-"classe"], method=c("center", "scale"))
preObj <- preProcess(trn[,-c("classe")], method=c("center", "scale"))
preObj <- preProcess(trn[,-c(classe)], method=c("center", "scale"))
dim(trn)
trn[,155]
preObj <- preProcess(trn[,-155], method=c("center", "scale"))
preObj
head(preObj)
head(trn)
sapply(X = trn, FUN = sum)
sapply(X = trn, FUN = sum(is.na()))
sapply(X = trn, FUN = sum(is.na))
sum(is.na(trn[,1]))
sum(is.na(trn[,2]))
sum(is.na(trn[,3]))
sum(is.na(trn[,9]))
sum(is.na(trn[,8]))
sum(is.na(trn[,10]))
sum(is.na(trn$avg_yaw_dumbbell))
dim(trn)
z <- rowSums(!is.na(trn[,c(1:20)]))
z
z <- rowSums(is.na(trn[,c(1:20)]))
z
z <- rowSums(is.na(trn[,c(1:2)]))
z
z <- sum(is.na(trn[,c(1:2)]))
z
z <- is.na(trn[,c(1:2)])
is.na(trn[,c(1:2)])
is.na(trn[,2])
sum(is.na(trn[,2]))
for (i in 10){
sum(is.na(trn[,i]))
}
for (i in 10){
z = sum(is.na(trn[,i]))
z
}
for (i in c(1:10)) {
z = sum(is.na(trn[,i]))
z
}
countna <- function(x) sum(is.na(x))
countna(trn$avg_yaw_arm)
countna <- function(x) sum(is.na(x))/count(x)
countna(trn$avg_yaw_arm)
countna <- function(x) sum(is.na(x))/length(x)
countna(trn$avg_yaw_arm)
percent_na <- function(x) sum(is.na(x))/length(x)
sapply(trn, fun=percent_na)
sapply(trn, percent_na)
nas = sapply(X = trn, FUN = sum(is.na))
percent_na <- function(x) sum(is.na(x))/length(x)
nas <- percent_na(trn$avg_yaw_arm)
nas
nas <- sapply(trn, percent_na)
nas
head(nas)
plot(nas)
hist(nas)
g <- ggplot(data=trn, mapping=aes(num_window, classe)) + geom_point()
g
percent_na <- function(x) sum(is.na(x))/length(x)
hist(sapply(trn, percent_na))
not_na <- function(x) sum(!is.na(x))
hist(sapply(trn, not_na))
table(sapply(trn, not_na))
g <- ggplot(data=dt, mapping=aes(num_window, classe)) + geom_point()
g
not_na <- function(x) sum(!is.na(x))
table(sapply(trn, not_na))
dim(trn)
not_na <- function(x) sum(!is.na(x))
table(sapply(dt, not_na))
table(sapply(dts, not_na))
table(sapply(trn, not_na))
hist(dt$new_window)
summary(dt$new_window)
summary(trn$new_window)
win <- trn[trn$new_window="yes"]
win <- trn[trn$new_window=="yes"]
win <- trn[,trn$new_window=="yes"]
win <- trn$new_window=="yes"
win
new_window <- trn$new_window=="yes"
new_window <- trn$new_window=="yes"
trn_summaries <- trn[new_window,]
trn_summaries
dim(trn_summaries)
table(sapply(trn_summaries, not_na))
trn_summaries <- trn[trn$new_window=="yes",]
table(sapply(trn_summaries, not_na))
table(sapply(trn, not_na))
trn_sum = data.frame()
summary_cols <- function(x) {
percent_na = sum(is.na(x))/length(x)
if (percent_na < .5){
trn_sum = cbind(trn_sum, x)
}
}
summary_cols(trn)
trn_sum
sapply(trn, summary_cols)
trn_sum = data.frame()
sapply(trn, summary_cols)
percent_na <- function(x) percent_na = sum(is.na(x))/length(x)
trn_summaries <- trn[trn$new_window=="yes",percent_na<1]
trn_summaries <- trn[trn$new_window=="yes",]
trn_summaries <- trn[trn$new_window=="yes",]
trn_summaries
trn[,colMeans(is.na(trn)) < 0.5]
tt <- trn[,colMeans(is.na(trn)) < 0.5]
colnames(tt)
dim(tt)
trn_summaries <- trn[trn$new_window=="yes",colMeans(is.na(trn)) >0.1]
dim(trn_summaries)
table(sapply(trn, not_na))
dim(trn_summaries)
not_na <- function(x) sum(!is.na(x))
table(sapply(trn, not_na))
trns <- trn[trn$new_window=="yes",colMeans(is.na(trn)) >0.1]
dim(trns)
trns <- trn[trn$new_window=="yes",]
trns <- trn[trn$new_window=="yes",colMeans(is.na(trn)) >0.1]
colnames(trns)
cols <- colnames(trns)
not_na <- function(x) sum(!is.na(x))
table(sapply(trn, not_na))
trns <- trn[trn$new_window=="yes",colMeans(is.na(trn)) >0.1]
cols <- colnames(trns)
dim(trns)
summary_cols <- colnames(trns)
trns <- cbind(trns, trn$classe)
trns <- trn[trn$new_window=="yes",(colMeans(is.na(trn)) >0.1 || colnames(trn)=="classe" ]
trns <- trn[trn$new_window=="yes",(colMeans(is.na(trn)) >0.1 || colnames(trn)=="classe") ]
dim(trns)
trns <- trn[trn$new_window=="yes",(colMeans(is.na(trn)) >0.1 | colnames(trn)=="classe") ]
dim(trns)
summary_cols <- colnames(trns)
model <- train(trns, classe ~ ., method="glm")
str(trns)
complete.cases(trns)
sum(complete.cases(trns))
model <- train(classe ~ ., data=trns, method="glm")
warnings()
model <- train(classe ~ ., data=trns, method="rf")
model$finalModel
featurePlot(x=trns[,-c(-"classe")], y=trns$classe, plot="pairs")
featurePlot(x=trns[,-c("classe")], y=trns$classe, plot="pairs")
featurePlot(x=trns[,c("classe")], y=trns$classe, plot="pairs")
featurePlot(x=trns[,c(1:67)], y=trns$classe, plot="pairs")
featurePlot(x=trns[,c(1:6)], y=trns$classe, plot="pairs")
for (i in c(1:dim(trns)[1]-1)) {
i
}
for (i in c(1:dim(trns)[1]-1)) {
View(i)
}
cor(trn[,1], trn$classe)
trn[,1]
cor(trn[,2], trn$classe)
trn[,2]
cor(trn[,2], trn$classe)
str(trn)
cor(trn[,3], trn$classe)
model$finalModel
plot(model$finalModel, uniform=TRUE, main="Biceps Curl")
par(mfrow=c(1,1))
plot(model$finalModel, uniform=TRUE, main="Biceps Curl")
plot(model$finalModel, uniform=TRUE, main="Biceps Curl", col=trn$classe)
plot(model$finalModel, uniform=TRUE, main="Biceps Curl")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
model <- train(classe ~ ., data=trns, method="rpart")
model$finalModel
plot(model$finalModel, uniform=TRUE, main="Biceps Curl")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
plot(model$finalModel, uniform=TRUE, main="Biceps Curl")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.2)
text(model$finalModel, use.n=TRUE, all=TRUE, cex=1)
plot(model$finalModel, uniform=TRUE, main="Biceps Curl")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(model$finalModel)
library(rattle)
fancyRpartPlot(model$finalModel)
confusionMatrix(model)
model <- train(classe ~ ., data=trns, method="rf")
confusionMatrix(model)
model$finalModel
model
g <- ggplot(data=trn, mapping=aes(num_window, classe)) + geom_point()
g
preObj <- preProcess(trns[,-68], method=c("center", "scale"))
model <- train(classe ~ ., data=trns, preProcess=c("center", "scale"), method="rpart")
model
model <- train(classe ~ ., data=trns, preProcess=c("center", "scale"), method="rf")
model
model$finalModel
model <- train(classe ~ ., data=trns, preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv"))
model <- train(classe ~ ., data=trns, preProcess=c("center", "scale"), method="rf",               trControl=trainControl(method="repeatedcv"))
model$finalModel
model
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", repeats = 5))
model$finalModel
model
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=5, repeats = 5))
model$finalModel
model
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=10, repeats = 10))
model
set.seed(3223)
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=5, repeats = 20))
model
set.seed(3223)
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=20, repeats = 5))
model
trnd<-trn[trn$new_window=="no",(colMeans(is.na(trn)) <0.1 | colnames(trn)=="classe")]
str(trnd)
sum(complete.cases(trnd))
detail_cols <- colnames(trnd)
dim(trnd)
modelDetail <- train(classe ~ ., data=trnd,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=10, repeats = 10))
str(trnd)
dim(trnd)
trnd <- trnd[,c(3:88)]
sum(complete.cases(trnd))
dim(trnd)
str(trnd)
model
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=3, repeats = 20))
model
model <- train(classe ~ ., data=trns, preProcess=preObj, method="rpart")
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
confusionMatrix(model)
model
model <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="rf",
trControl=trainControl(method="repeatedcv", number=20, repeats = 5))
model
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(model, tsts)
pred
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
colMeans(tsts$predRight)
mean(tsts$predRight)
tsts
str(tsts)
g <- ggplot(tsts, mapping = aes(x = classe, y = mean(predRight))) + geom_bar()
g
g <- ggplot(tsts, mapping = aes(x = classe, y = mean(predRight))) + geom_bar(stat = identity)
g
g <- ggplot(tsts, mapping = aes(x = classe, y = mean(predRight))) + geom_point()
g
g <- ggplot(tsts, mapping = aes(x = classe, y = mean(predRight))) + geom_bar(stat="identity")
g
mean(tsts$predRight)
g <- ggplot(tsts, mapping = aes(x = classe, y = sum(predRight))) + geom_bar(stat="identity")
ggplot(tsts, mapping = aes(x = classe, y = sum(predRight))) + geom_bar(stat="identity")
ggplot(tsts, mapping = aes(x = classe, y = sum(predRight))) + geom_point()
ggplot(tsts, mapping = aes(x = classe, y = mean(predRight))) + geom_point()
ggplot(tsts, mapping = aes(x = classe, y = mean(predRight))) + geom_line()
ggplot(mapping = aes(x = tsts$classe, y = pred)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.1)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, col="gray", alpha=0.1)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, col="lightgrey", alpha=0.1)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, col="blue", alpha=0.1)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, color="blue", alpha=0.1)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.05, size=3)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.05, size=3)) + geom_point(col=tsts$predRight)
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.05, size=3)) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.005, size=3)) + geom_point()
ggplot(tsts, mapping = aes(x = classe, y = sum(predRight))) + facet_grid(classe~.) + geom_bar(stat="identity")
ggplot(tsts, mapping = aes(x = classe, y = sum(predRight))) + facet_grid(.~classe) + geom_bar(stat="identity")
preProcess=c("center", "scale"), method="gbm")
modelB <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="gbm")
modelB <- train(classe ~ ., data=trns, preProcess=c("center", "scale"), method="gbm", verbose=FALSE)
modelB
modelB$finalModel
plot(modelB$finalModel, uniform=TRUE, main="Biceps Curl")
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
modelB <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="gbm", verbose=FALSE,
trControl=trainControl(method="repeatedcv", number=20, repeats = 5))
?rpart
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
set.seed(3223)
modelB <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="gbm", verbose=FALSE,
trControl=trainControl(method="repeatedcv", number=5, repeats = 5))
modelB
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
model
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(model, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
modelB <- train(classe ~ ., data=trns,
preProcess=c("center", "scale"), method="gbm", verbose=FALSE,
trControl=trainControl(method="repeatedcv", number=5, repeats = 10))
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$classe)
mean(tsts$predRight)
vlds<-vld[vld$new_window=="yes",(colMeans(is.na(vld)) >0.1 | colnames(vld)=="classe")]
pred <- predict(model, vlds)
vlds$predRight <- pred==vlds$classe
table(pred, vlds$classe)
mean(vlds$predRight)
ggplot(vlds, mapping = aes(x = classe, y = sum(predRight))) + facet_grid(.~classe) + geom_bar(stat="identity")
ggplot(vlds, mapping = aes(x = classe, y = sum(predRight))) + facet_grid(.~classe) + geom_bar(stat="identity")
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.005, size=3)) + geom_point()
ggplot(vlds, mapping = aes(x = classe, y = sum(predRight))) + facet_grid(.~classe) + geom_bar(stat="identity")
ggplot(mapping = aes(x = vlds$classe, y = pred, alpha=0.005, size=3)) + geom_point()
vlds<-vld[vld$new_window=="yes",(colMeans(is.na(vld)) >0.1 | colnames(vld)=="classe")]
pred <- predict(modelB, vlds)
vlds$predRight <- pred==vlds$classe
table(pred, vlds$classe)
mean(vlds$predRight)
vlds<-vld[vld$new_window=="yes",(colMeans(is.na(vld)) >0.1 | colnames(vld)=="classe")]
pred <- predict(model, vlds)
vlds$predRight <- pred==vlds$classe
table(pred, vlds$classe)
mean(vlds$predRight)
vlds<-vld[vld$new_window=="yes",(colMeans(is.na(vld)) >0.1 | colnames(vld)=="classe")]
pred <- predict(modelB, vlds)
vlds$predRight <- pred==vlds$classe
table(pred, vlds$classe)
mean(vlds$predRight)
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.005, size=mean(predRight))) + geom_point()
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.005, size=mean(tsts$predRight))) + geom_point()
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(modelB, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$classe)
mean(tsts$predRight)
tsts<-tst[tst$new_window=="yes",(colMeans(is.na(tst)) >0.1 | colnames(tst)=="classe")]
pred <- predict(model, tsts)
tsts$predRight <- pred==tsts$classe
table(pred, tsts$class)
mean(tsts$predRight)
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.005, size=3)) + geom_point()
tsts
head(tsts)
str(tsts)
ggplot(mapping = aes(x = tsts$classe, y = pred, alpha=0.005, size=mean(tsts$predRight))) + geom_point()
model
View(tsts)
total <- which(grepl("^total", colnames(trn), ignore.case = F))
total
head(trn[,total])
